import React, { useState } from 'react';
import { ShoppingCart, Coins, Plus, Users, Gamepad2, Home, Building, Coffee, Wine, Utensils, Car, MapPin, Gift, Zap, Clock, Star } from 'lucide-react';
import CartModal from './CartModal';
import TopUpModal from './TopUpModal';

const DiSpacePrototype = () => {
  const [activeTab, setActiveTab] = useState('digitalbar');
  const [selectedVenue, setSelectedVenue] = useState('bar');
  const [selectedCategory, setSelectedCategory] = useState('beer');
  const [cartCount, setCartCount] = useState(3);
  const [barCoinBalance, setBarCoinBalance] = useState(156.8);
  const [currentGame, setCurrentGame] = useState(null);
  const [gameParticipants, setGameParticipants] = useState([]);
  const [showCart, setShowCart] = useState(false);
  const [showTopUp, setShowTopUp] = useState(false);
  const [cartItems, setCartItems] = useState([]);

  // –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π
  const venueData = {
    bar: {
      name: "Digital Bar Tbilisi",
      categories: [
        { id: 'beer', name: '–ü–∏–≤–æ', icon: 'üç∫', color: 'bg-amber-100' },
        { id: 'wine', name: '–í–∏–Ω–æ', icon: 'üç∑', color: 'bg-purple-100' },
        { id: 'cocktails', name: '–ö–æ–∫—Ç–µ–π–ª–∏', icon: 'üç∏', color: 'bg-pink-100' },
        { id: 'shots', name: '–®–æ—Ç—ã', icon: 'ü•É', color: 'bg-orange-100' },
        { id: 'snacks', name: '–ó–∞–∫—É—Å–∫–∏', icon: 'ü•®', color: 'bg-yellow-100' },
        { id: 'kitchen', name: '–ö—É—Ö–Ω—è', icon: 'üçù', color: 'bg-red-100' },
        { id: 'special', name: '–ê–∫—Ü–∏–∏', icon: 'üéâ', color: 'bg-green-100' },
      ],
      items: {
        beer: [
          { id: 1, name: 'Natakhtari Lager', price: 7, coinPrice: 5.5, image: 'üç∫', rating: 4.2, description: '–õ–µ–≥–∫–æ–µ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–µ –ø–∏–≤–æ' },
          { id: 2, name: 'Guinness', price: 12, coinPrice: 9, image: 'üç∫', rating: 4.8, description: '–ò—Ä–ª–∞–Ω–¥—Å–∫–æ–µ —Å—Ç–∞—É—Ç' },
          { id: 3, name: 'Corona Extra', price: 10, coinPrice: 7.5, image: 'üç∫', rating: 4.0, description: '–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–æ–µ —Å–≤–µ—Ç–ª–æ–µ –ø–∏–≤–æ' },
        ],
        wine: [
          { id: 4, name: '–°–∞–ø–µ—Ä–∞–≤–∏ 2021', price: 25, coinPrice: 18, image: 'üç∑', rating: 4.6, description: '–ì—Ä—É–∑–∏–Ω—Å–∫–æ–µ –∫—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ' },
          { id: 5, name: '–†–∫–∞—Ü–∏—Ç–µ–ª–∏', price: 22, coinPrice: 16, image: 'üç∑', rating: 4.3, description: '–ë–µ–ª–æ–µ —Å—É—Ö–æ–µ –≤–∏–Ω–æ' },
        ],
        cocktails: [
          { id: 6, name: '–ú–æ—Ö–∏—Ç–æ', price: 15, coinPrice: 12, image: 'üç∏', rating: 4.5, description: '–û—Å–≤–µ–∂–∞—é—â–∏–π –∫–æ–∫—Ç–µ–π–ª—å —Å –º—è—Ç–æ–π' },
          { id: 7, name: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', price: 18, coinPrice: 14, image: 'üç∏', rating: 4.4, description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å —Å —Ç–µ–∫–∏–ª–æ–π' },
        ],
        snacks: [
          { id: 8, name: '–•–∞—á–∞–ø—É—Ä–∏ –ø–æ-–∞–¥–∂–∞—Ä—Å–∫–∏', price: 8, coinPrice: 6, image: 'üßÄ', rating: 4.9, description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è –≥—Ä—É–∑–∏–Ω—Å–∫–∞—è –≤—ã–ø–µ—á–∫–∞' },
          { id: 9, name: '–°—É–ª—É–≥—É–Ω–∏ –∂–∞—Ä–µ–Ω—ã–π', price: 6, coinPrice: 4.5, image: 'üßÑ', rating: 4.7, description: '–ñ–∞—Ä–µ–Ω—ã–π –≥—Ä—É–∑–∏–Ω—Å–∫–∏–π —Å—ã—Ä' },
        ]
      }
    },
    hotel: {
      name: "DiSpace Hotel",
      categories: [
        { id: 'rooms', name: '–ù–æ–º–µ—Ä–∞', icon: 'üõèÔ∏è', color: 'bg-blue-100' },
        { id: 'breakfast', name: '–ó–∞–≤—Ç—Ä–∞–∫', icon: 'ü•ê', color: 'bg-orange-100' },
        { id: 'spa', name: 'SPA', icon: 'üßò‚Äç‚ôÄÔ∏è', color: 'bg-green-100' },
        { id: 'services', name: '–£—Å–ª—É–≥–∏', icon: 'üõéÔ∏è', color: 'bg-purple-100' },
      ],
      items: {
        rooms: [
          { id: 10, name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç', price: 120, coinPrice: 90, image: 'üõèÔ∏è', rating: 4.1, description: '–£—é—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥' },
          { id: 11, name: '–î–µ–ª—é–∫—Å', price: 180, coinPrice: 135, image: 'üè®', rating: 4.7, description: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å –±–∞–ª–∫–æ–Ω–æ–º' },
        ],
        breakfast: [
          { id: 12, name: '–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫', price: 15, coinPrice: 11, image: 'ü•ê', rating: 4.5, description: '–®–≤–µ–¥—Å–∫–∏–π —Å—Ç–æ–ª' },
        ]
      }
    },
    tours: {
      name: "Georgia Tours",
      categories: [
        { id: 'wine', name: '–í–∏–Ω–Ω—ã–µ', icon: 'üçá', color: 'bg-purple-100' },
        { id: 'offroad', name: '–û—Ñ—Ñ—Ä–æ—É–¥', icon: 'üöô', color: 'bg-green-100' },
        { id: 'historical', name: '–ò—Å—Ç–æ—Ä–∏—è', icon: 'üèõÔ∏è', color: 'bg-amber-100' },
        { id: 'hiking', name: '–•–∞–π–∫–∏–Ω–≥', icon: 'ü•æ', color: 'bg-blue-100' },
      ],
      items: {
        wine: [
          { id: 13, name: '–ö–∞—Ö–µ—Ç–∏—è –≤–∏–Ω–Ω—ã–π —Ç—É—Ä', price: 85, coinPrice: 65, image: 'üçá', rating: 4.8, description: '–ü–æ—Å–µ—â–µ–Ω–∏–µ 3 –≤–∏–Ω–æ–¥–µ–ª—å–Ω–µ–Ω' },
          { id: 14, name: '–°–∏–≥–Ω–∞—Ö–∏ —Ä–æ–º–∞–Ω—Ç–∏–∫', price: 75, coinPrice: 58, image: 'üíë', rating: 4.6, description: '–ì–æ—Ä–æ–¥ –ª—é–±–≤–∏ —Å –¥–µ–≥—É—Å—Ç–∞—Ü–∏–µ–π' },
        ],
        offroad: [
          { id: 15, name: '–î–∞—à–±–∞—à–∏ –∫–∞–Ω—å–æ–Ω', price: 95, coinPrice: 72, image: 'üöô', rating: 4.9, description: '–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ' },
        ]
      }
    }
  };

  const games = [
    { id: 'zhMyak', name: '–ñ–ú–Ø–ö', icon: 'üëÜ', reward: 5, players: '2-8', description: '–ò–≥—Ä–∞ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é' },
    { id: 'quiz', name: '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞', icon: 'üß†', reward: 10, players: '2-6', description: '–ü—Ä–æ–≤–µ—Ä—å —ç—Ä—É–¥–∏—Ü–∏—é' },
    { id: 'alias', name: 'Alias', icon: 'üí¨', reward: 8, players: '4-12', description: '–û–±—ä—è—Å–Ω–∏ —Å–ª–æ–≤–æ' },
    { id: 'spy', name: '–®–ø–∏–æ–Ω', icon: 'üïµÔ∏è', reward: 6, players: '3-8', description: '–ù–∞–π–¥–∏ —à–ø–∏–æ–Ω–∞' },
    { id: 'never', name: '–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ...', icon: 'üôà', reward: 4, players: '3-10', description: '–û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã' },
  ];

  const addToCart = (item) => {
    const cartItem = {
      ...item,
      venue: selectedVenue,
      venueName: venueData[selectedVenue].name,
      quantity: 1,
      cartId: Date.now()
    };
    
    setCartItems(prev => {
      const existing = prev.find(ci => ci.id === item.id && ci.venue === selectedVenue);
      if (existing) {
        return prev.map(ci => 
          ci.id === item.id && ci.venue === selectedVenue 
            ? { ...ci, quantity: ci.quantity + 1 }
            : ci
        );
      }
      return [...prev, cartItem];
    });
    
    setCartCount(prev => prev + 1);
    // Haptic feedback simulation
    if (navigator.vibrate) {
      navigator.vibrate(50);
    }
  };

  const removeFromCart = (cartId) => {
    setCartItems(prev => {
      const item = prev.find(ci => ci.cartId === cartId);
      if (item) {
        setCartCount(c => c - item.quantity);
        return prev.filter(ci => ci.cartId !== cartId);
      }
      return prev;
    });
  };

  const updateQuantity = (cartId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(cartId);
      return;
    }
    
    setCartItems(prev => {
      return prev.map(item => {
        if (item.cartId === cartId) {
          const oldQuantity = item.quantity;
          const quantityDiff = newQuantity - oldQuantity;
          setCartCount(c => c + quantityDiff);
          return { ...item, quantity: newQuantity };
        }
        return item;
      });
    });
  };

  const getTotalPrice = () => {
    return cartItems.reduce((sum, item) => sum + (item.coinPrice * item.quantity), 0);
  };

  const getTotalCashPrice = () => {
    return cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  };

  const startGame = (game) => {
    setCurrentGame(game);
    setGameParticipants([{ name: '–í—ã', id: 'user1' }]);
  };

  const joinGame = () => {
    const names = ['–ê–Ω–Ω–∞', '–ì–µ–æ—Ä–≥–∏–π', '–ú–∞—Ä–∏—è', '–î–∞–≤–∏–¥', '–ù–∏–Ω–æ', '–õ—É–∫–∞', '–°–æ—Ñ–∏—è', '–ù–∏–∫–æ–ª–æ–∑'];
    const randomName = names[Math.floor(Math.random() * names.length)];
    setGameParticipants(prev => [...prev, { name: randomName, id: `user${prev.length + 1}` }]);
  };

  const handleTopUp = (amount) => {
    setBarCoinBalance(prev => prev + amount);
    setShowTopUp(false);
  };

  const handleCheckout = () => {
    const total = getTotalPrice();
    if (barCoinBalance >= total) {
      setBarCoinBalance(prev => prev - total);
      setCartItems([]);
      setCartCount(0);
      setShowCart(false);
      alert('üéâ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10-15 –º–∏–Ω—É—Ç.');
    } else {
      alert('üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BarCoin –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞');
    }
  };

  const renderContent = () => {
    if (activeTab === 'home') {
      return (
        <div className="h-full bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-50 p-6">
          <div className="text-center mb-8">
            <div className="w-24 h-24 bg-gradient-to-br from-purple-600 to-pink-600 rounded-3xl mx-auto mb-4 flex items-center justify-center text-white text-4xl font-bold shadow-2xl">
              DS
            </div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-2">
              DiSpace
            </h1>
            <p className="text-gray-600 text-lg">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞</p>
          </div>

          <div className="space-y-6">
            <div className="bg-white rounded-2xl shadow-lg p-6 border border-purple-100">
              <div className="flex items-center gap-4 mb-4">
                <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center">
                  <Building className="text-white" size={24} />
                </div>
                <div>
                  <h3 className="text-xl font-bold text-gray-900">DigitalBar</h3>
                  <p className="text-gray-600">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∑–∞–∫–∞–∑—ã</p>
                </div>
              </div>
              <ul className="space-y-2 text-sm text-gray-700">
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                  –ë–∞—Ä—ã, –æ—Ç–µ–ª–∏, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –∫–∞—Ñ–µ
                </li>
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                  –¢—É—Ä—ã –ø–æ –ì—Ä—É–∑–∏–∏ (–≤–∏–Ω–Ω—ã–µ, –æ—Ñ—Ñ—Ä–æ—É–¥, —Ö–∞–π–∫–∏–Ω–≥)
                </li>
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                  –ó–∞–∫–∞–∑ –±–µ–∑ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Å—Ç–æ–π–∫–µ
                </li>
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                  –°–∫–∏–¥–∫–∏ –∑–∞ BarCoin –¥–æ 30%
                </li>
              </ul>
            </div>

            <div className="bg-white rounded-2xl shadow-lg p-6 border border-pink-100">
              <div className="flex items-center gap-4 mb-4">
                <div className="w-12 h-12 bg-gradient-to-br from-pink-500 to-purple-600 rounded-xl flex items-center justify-center">
                  <Gamepad2 className="text-white" size={24} />
                </div>
                <div>
                  <h3 className="text-xl font-bold text-gray-900">GameBar</h3>
                  <p className="text-gray-600">–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</p>
                </div>
              </div>
              <ul className="space-y-2 text-sm text-gray-700">
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-pink-500 rounded-full"></div>
                  –ñ–ú–Ø–ö, Alias, –®–ø–∏–æ–Ω, –í–∏–∫—Ç–æ—Ä–∏–Ω—ã
                </li>
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-pink-500 rounded-full"></div>
                  –ö–æ–º–∞–Ω–¥–Ω—ã–µ –∏–≥—Ä—ã –≤ –±–∞—Ä–∞—Ö
                </li>
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-pink-500 rounded-full"></div>
                  –ù–∞–≥—Ä–∞–¥—ã –≤ BarCoin –∑–∞ –ø–æ–±–µ–¥—ã
                </li>
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-pink-500 rounded-full"></div>
                  QR-–∫–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤
                </li>
              </ul>
            </div>

            <div className="bg-white rounded-2xl shadow-lg p-6 border border-yellow-100">
              <div className="flex items-center gap-4 mb-4">
                <div className="w-12 h-12 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-xl flex items-center justify-center">
                  <Coins className="text-white" size={24} />
                </div>
                <div>
                  <h3 className="text-xl font-bold text-gray-900">BarCoin</h3>
                  <p className="text-gray-600">–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–∞ TON</p>
                </div>
              </div>
              <ul className="space-y-2 text-sm text-gray-700">
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                  –ï–¥–∏–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                </li>
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                  –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –∏–≥—Ä–∞—Ö –∏ –ø–æ–∫—É–ø–∫–∞—Ö
                </li>
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –¥–æ–ª–ª–∞—Ä—ã –∏ –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã
                </li>
                <li className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Wallet
                </li>
              </ul>
            </div>

            <div className="bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl shadow-lg p-6 text-white">
              <h3 className="text-xl font-bold mb-3">üéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</h3>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div className="flex items-center gap-2">
                  <Gift size={16} />
                  <span>–ö—ç—à–±—ç–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã</span>
                </div>
                <div className="flex items-center gap-2">
                  <Users size={16} />
                  <span>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã</span>
                </div>
                <div className="flex items-center gap-2">
                  <Zap size={16} />
                  <span>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</span>
                </div>
                <div className="flex items-center gap-2">
                  <Star size={16} />
                  <span>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }

    if (activeTab === 'gamebar') {
      if (currentGame) {
        return (
          <div className="h-full bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900 text-white p-6 flex flex-col">
            <div className="text-center mb-8">
              <div className="text-6xl mb-4">{currentGame.icon}</div>
              <h2 className="text-2xl font-bold mb-2">{currentGame.name}</h2>
              <p className="text-purple-300 mb-4">{currentGame.description}</p>
              <div className="flex justify-center items-center gap-4 text-sm opacity-90">
                <span className="flex items-center gap-1">
                  <Users size={16} />
                  {currentGame.players}
                </span>
                <span className="flex items-center gap-1">
                  <Coins size={16} />
                  {currentGame.reward} BarCoin
                </span>
              </div>
            </div>

            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 mb-6">
              <h3 className="text-lg font-semibold mb-4">–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({gameParticipants.length})</h3>
              <div className="grid grid-cols-2 gap-3 mb-4">
                {gameParticipants.map((player, idx) => (
                  <div key={player.id} className="bg-white/20 rounded-lg p-3 text-center">
                    <div className="text-2xl mb-1">üë§</div>
                    <div className="text-sm font-medium">{player.name}</div>
                  </div>
                ))}
              </div>
              
              <button 
                onClick={joinGame}
                className="w-full bg-green-500 hover:bg-green-600 rounded-lg p-3 font-semibold transition-colors flex items-center justify-center gap-2"
              >
                <Plus size={20} />
                –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞
              </button>
            </div>

            {currentGame.id === 'zhMyak' && (
              <div className="flex-1 flex flex-col items-center justify-center">
                <button 
                  className="w-48 h-48 bg-gradient-to-br from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700 rounded-full shadow-2xl transform hover:scale-105 transition-all duration-200 text-white font-bold text-xl"
                  onClick={() => {
                    const winner = gameParticipants[Math.floor(Math.random() * gameParticipants.length)];
                    setBarCoinBalance(prev => prev + currentGame.reward);
                    alert(`üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winner.name}! +${currentGame.reward} BarCoin`);
                  }}
                >
                  –ñ–ú–Ø–ö!
                </button>
                <p className="text-center mt-4 opacity-75">–ù–∞–∂–º–∏ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö!</p>
              </div>
            )}

            <button 
              onClick={() => setCurrentGame(null)}
              className="mt-4 bg-gray-600 hover:bg-gray-700 rounded-lg p-3 font-semibold transition-colors"
            >
              –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º
            </button>
          </div>
        );
      }

      return (
        <div className="h-full bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900 text-white p-6">
          <div className="text-center mb-8">
            <Gamepad2 size={48} className="mx-auto mb-4 text-purple-300" />
            <h2 className="text-2xl font-bold mb-2">GameBar</h2>
            <p className="text-purple-300">–ò–≥—Ä–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π BarCoin!</p>
          </div>

          <div className="grid gap-4">
            {games.map(game => (
              <div key={game.id} className="bg-white/10 backdrop-blur-sm rounded-2xl p-4 hover:bg-white/20 transition-all">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-3">
                    <span className="text-3xl">{game.icon}</span>
                    <div>
                      <h3 className="font-bold text-lg">{game.name}</h3>
                      <p className="text-sm text-purple-300">{game.players} –∏–≥—Ä–æ–∫–æ–≤</p>
                      <p className="text-xs text-purple-400">{game.description}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="flex items-center gap-1 text-yellow-400 font-bold">
                      <Coins size={16} />
                      {game.reward}
                    </div>
                    <div className="text-xs text-purple-300">–∑–∞ –ø–æ–±–µ–¥—É</div>
                  </div>
                </div>
                
                <button 
                  onClick={() => startGame(game)}
                  className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 rounded-lg p-3 font-semibold transition-all transform hover:scale-105"
                >
                  –ò–≥—Ä–∞—Ç—å
                </button>
              </div>
            ))}
          </div>
        </div>
      );
    }

    const venue = venueData[selectedVenue];
    const items = venue.items[selectedCategory] || [];

    return (
      <div className="h-full bg-gradient-to-br from-gray-50 to-gray-100 p-4">
        <div className="bg-white rounded-2xl shadow-lg overflow-hidden mb-4">
          <div className="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4">
            <h2 className="text-xl font-bold">{venue.name}</h2>
            <div className="flex items-center gap-2 mt-1 text-purple-200">
              <MapPin size={16} />
              <span className="text-sm">–¢–±–∏–ª–∏—Å–∏, –°—Ç–∞—Ä—ã–π –≥–æ—Ä–æ–¥</span>
            </div>
          </div>
          
          <div className="p-4">
            <div className="flex gap-2 mb-4">
              <button className="bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-medium">
                ‚≠ê 4.8 ‚Ä¢ 245 –æ—Ç–∑—ã–≤–æ–≤
              </button>
              <button className="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm font-medium">
                üïê –û—Ç–∫—Ä—ã—Ç–æ –¥–æ 02:00
              </button>
            </div>
          </div>
        </div>

        <div className="grid gap-4">
          {items.map(item => (
            <div key={item.id} className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all transform hover:-translate-y-1">
              <div className="flex">
                <div className="flex-shrink-0 w-20 h-20 bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center text-3xl">
                  {item.image}
                </div>
                
                <div className="flex-1 p-4">
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <h3 className="font-bold text-lg text-gray-900">{item.name}</h3>
                      <p className="text-sm text-gray-600">{item.description}</p>
                    </div>
                    <div className="flex items-center gap-1 text-yellow-500">
                      <Star size={16} fill="currentColor" />
                      <span className="text-sm font-medium">{item.rating}</span>
                    </div>
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <div className="flex flex-col gap-1">
                      <div className="text-gray-500 text-sm line-through">{item.price} ‚Çæ</div>
                      <div className="flex items-center gap-1 text-purple-600 font-bold">
                        <Coins size={16} />
                        {item.coinPrice} BarCoin
                      </div>
                    </div>
                    
                    <button 
                      onClick={() => addToCart(item)}
                      className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white px-4 py-2 rounded-xl font-semibold transition-all transform hover:scale-105 shadow-lg"
                    >
                      –í –∫–æ—Ä–∑–∏–Ω—É
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
          
          {items.length === 0 && (
            <div className="text-center py-12 text-gray-500">
              <div className="text-4xl mb-4">üîç</div>
              <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –±–∞—Ä–Ω–æ–π —Å—Ç–æ–π–∫–∏</p>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="max-w-md mx-auto bg-white min-h-screen flex flex-col relative">
      {/* –ü–ª–∞–≤–∞—é—â–∞—è —à–∞–ø–∫–∞ */}
      <div className="sticky top-0 z-50 bg-white/95 backdrop-blur-sm shadow-lg border-b">
        <div className="flex items-center justify-between p-4">
          <div className="flex space-x-1">
            <button 
              onClick={() => setActiveTab('home')}
              className={`px-3 py-2 rounded-xl font-medium transition-all ${activeTab === 'home' ? 'bg-purple-600 text-white' : 'text-gray-600 hover:bg-gray-100'}`}
            >
              <Home size={16} />
            </button>
            <button 
              onClick={() => setActiveTab('digitalbar')}
              className={`px-3 py-2 rounded-xl font-medium transition-all ${activeTab === 'digitalbar' ? 'bg-purple-600 text-white' : 'text-gray-600 hover:bg-gray-100'}`}
            >
              <Building size={16} />
            </button>
            <button 
              onClick={() => setActiveTab('gamebar')}
              className={`px-3 py-2 rounded-xl font-medium transition-all ${activeTab === 'gamebar' ? 'bg-purple-600 text-white' : 'text-gray-600 hover:bg-gray-100'}`}
            >
              <Gamepad2 size={16} />
            </button>
          </div>
          
          <div className="flex items-center gap-3">
            <div className="flex items-center gap-1 bg-gradient-to-r from-yellow-400 to-yellow-500 text-yellow-900 px-3 py-1 rounded-full font-bold">
              <Coins size={16} />
              {barCoinBalance.toFixed(1)}
            </div>
            <button 
              onClick={() => setShowTopUp(true)}
              className="bg-green-500 hover:bg-green-600 text-white p-2 rounded-full transition-colors">
              <Plus size={16} />
            </button>
            <button 
              onClick={() => setShowCart(true)}
              className="relative p-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors">
              <ShoppingCart size={16} />
              {cartCount > 0 && (
                <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                  {cartCount}
                </span>
              )}
            </button>
          </div>
        </div>
      </div>

      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –≤–∏—Ç—Ä–∏–Ω–∞ */}
      <div className="flex-1 overflow-y-auto">
        {renderContent()}
      </div>

      {/* –ë–∞—Ä–Ω–∞—è —Å—Ç–æ–π–∫–∞ (–Ω–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è) */}
      {activeTab === 'digitalbar' && (
        <div className="bg-gradient-to-r from-purple-900 via-purple-800 to-indigo-900 text-white p-4">
          <div className="flex items-center justify-between mb-3">
            <select 
              value={selectedVenue} 
              onChange={(e) => {
                setSelectedVenue(e.target.value);
                setSelectedCategory(venueData[e.target.value].categories[0].id);
              }}
              className="bg-white/20 backdrop-blur-sm border-0 rounded-lg px-3 py-2 text-white text-sm font-medium"
            >
              <option value="bar">üç∫ –ë–∞—Ä</option>
              <option value="hotel">üè® –û—Ç–µ–ª—å</option>
              <option value="tours">üöå –¢—É—Ä—ã</option>
            </select>
            
            <div className="flex items-center gap-2 text-sm">
              <Zap size={16} className="text-yellow-400" />
              <span>–°–∫–∏–¥–∫–∞ 30% –∑–∞ BarCoin!</span>
            </div>
          </div>
          
          <div className="flex gap-2 overflow-x-auto pb-2">
            {venueData[selectedVenue].categories.map(category => (
              <button
                key={category.id}
                onClick={() => setSelectedCategory(category.id)}
                className={`flex-shrink-0 flex flex-col items-center p-3 rounded-2xl transition-all min-w-[80px] ${
                  selectedCategory === category.id 
                    ? 'bg-white text-purple-900 shadow-lg transform scale-105' 
                    : 'bg-white/20 hover:bg-white/30 text-white'
                }`}
              >
                <span className="text-2xl mb-1">{category.icon}</span>
                <span className="text-xs font-medium text-center">{category.name}</span>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {showCart && (
        <CartModal
          cartItems={cartItems}
          onClose={() => setShowCart(false)}
          onUpdateQuantity={updateQuantity}
          onRemoveItem={removeFromCart}
          onCheckout={handleCheckout}
          totalPrice={getTotalPrice()}
          totalCashPrice={getTotalCashPrice()}
          barCoinBalance={barCoinBalance}
        />
      )}

      {showTopUp && (
        <TopUpModal
          onClose={() => setShowTopUp(false)}
          onTopUp={handleTopUp}
          currentBalance={barCoinBalance}
        />
      )}
    </div>
  );
};

export default DiSpacePrototype;